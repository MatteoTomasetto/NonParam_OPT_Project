idx_Var = c(12,13,15,173)
idx_Group = 3
groups = levels(df[,idx_Group])
# discard NA
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
image(corr_matrix_x)
image(corr_matrix_y)
# test
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
# T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
# T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
idx_Var = c(12,13,15,33,34,173)
idx_Group = 3
groups = levels(df[,idx_Group])
# discard NA
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
image(corr_matrix_x)
image(corr_matrix_y)
# test
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
# T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
# T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
# test
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
matrix_y_obs
idx_Var = c(12,13,15,34,173)
idx_Group = 3
groups = levels(df[,idx_Group])
# discard NA
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
image(corr_matrix_x)
image(corr_matrix_y)
# test
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
# T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
# T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
idx_Var = c(12,13,15,17,19,173)
idx_Group = 3
groups = levels(df[,idx_Group])
# discard NA
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
image(corr_matrix_x)
image(corr_matrix_y)
# test
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
# T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
# T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
idx_Var = c(12,13,15,38,40,173)
idx_Group = 3
groups = levels(df[,idx_Group])
# discard NA
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
image(corr_matrix_x)
image(corr_matrix_y)
# test
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
# T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
# T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
idx_Var = c(12,13,15,38,40,155,173)
idx_Group = 3
groups = levels(df[,idx_Group])
# discard NA
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
image(corr_matrix_x)
image(corr_matrix_y)
# test
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
# T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
# T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
idx_Var = c(12,13,15,155,171,173)
idx_Group = 3
groups = levels(df[,idx_Group])
# discard NA
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
image(corr_matrix_x)
image(corr_matrix_y)
# test
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
# T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
# T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
norm(corr_matrix_x)
norm(corr_matrix_y)
norm(corr_matrix_x)
corr_matrix_y
idx_Var = c(12,13,15,155,173)
idx_Group = 70
groups = levels(df[,idx_Group])
# discard NA
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
# visua
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
norm(corr_matrix_x)
norm(corr_matrix_y)
image(corr_matrix_x)
image(corr_matrix_y)
groups
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
# T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
# T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
# T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
# T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
correlation_matrix = function(x){   # x = dataframe
p <- dim(x)[2]
isfactor <- c()
for(k in 1:p){
isfactor[k] <- ifelse(is.factor(x[,k])==TRUE,1,0)
}
corr_matrix <- matrix(NA,p,p)
for(i in 1:p){
for(j in 1:p){
if(i==j){
corr_matrix[i,j] = 1
} else {
if(isfactor[i]==0 & isfactor[j]==0){
# Sperman's correlation coefficient if the 2 variables are continuous
corr_matrix[i,j] = cor(x[,i], x[,j], method = c("spearman"))
# Alternative: Kendall's correlation coefficient if the 2 variables are continuous
# corr_matrix[i,j] = cor(x[,i], x[,j], method = c("kendall"))
corr_matrix[j,i] = corr_matrix[i,j]
}
if(isfactor[i]==0 & isfactor[j]==1){
# Rank biserial correlation if the 1 variable is continuous and the other is boolean
categ <- levels(x[,j])
idx1 <- which(x[,j]==categ[1])
idx2 <- which(x[,j]==categ[2])
data_ranked <- rank(x[,i])
corr_matrix[i,j] = 2*(mean(data_ranked[idx2])-mean(data_ranked[idx1]))/(dim(x)[1])
corr_matrix[j,i] = corr_matrix[i,j]
}
if(isfactor[i]==1 & isfactor[j]==0){
# Rank biserial correlation if the 1 variable is continuous and the other is binary
categ <- levels(x[,i])
idx1 <- which(x[,i]==categ[1])
idx2 <- which(x[,i]==categ[2])
data_ranked <- rank(x[,j])
corr_matrix[i,j] = 2*(mean(data_ranked[idx2])-mean(data_ranked[idx1]))/(dim(x)[1])
corr_matrix[j,i] = corr_matrix[i,j]
}
if(isfactor[i]==1 & isfactor[j]==1){
# Phi coefficient if the 2 variables are binary
t <- table(x[,i],x[,j])
corr_matrix[i,j] = (t[1,1]*t[2,2]-t[1,2]*t[2,1])/sqrt((t[1,1]+t[1,2])*(t[2,1]+t[2,2])*(t[1,1]+t[2,1])*(t[1,2]+t[2,2]))
corr_matrix[j,i] = corr_matrix[i,j]
}
}
}
}
return(corr_matrix)
}
idx_Var = c(12,13,15,155,173)
idx_Group = 70
groups = levels(df[,idx_Group])
groups
df[,70]
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
Group_test
idx_Group
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
corr_matrix_x
corr_matrix_y
image(corr_matrix_x)
image(corr_matrix_y)
idx_Var = c(12,13,155,173)
idx_Group = 70
groups = levels(df[,idx_Group])
# discard NA
idx_NA_Var = c()
for (i in 1:length(idx_Var)){
idx_NA_Var = c(idx_NA_Var, which(is.na(df[,idx_Var[i]])))
}
idx_NA_Var = sort(unique(idx_NA_Var))
Var_test = df[-idx_NA_Var,idx_Var]
Group_test = df[-idx_NA_Var,idx_Group]
x = Var_test[which(Group_test==groups[1]),]
y = Var_test[which(Group_test==groups[2]),]
# visualize and compute di correlation matrices
corr_matrix_x <- correlation_matrix(x)
corr_matrix_y <- correlation_matrix(y)
norm(corr_matrix_x)
norm(corr_matrix_y)
image(corr_matrix_x)
image(corr_matrix_y)
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
# T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
# T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
iter = 1e3
matrix_x_obs <- correlation_matrix(x)
matrix_y_obs <- correlation_matrix(y)
T0 <- sqrt(sum((matrix_x_obs - matrix_y_obs)^2))
# T0 <- 1 - sum(diag(matrix_x_obs*matrix_y_obs))/(norm(matrix_x_obs,"F")*norm(matrix_y_obs,"F"))
x_pooled <- rbind(x,y)
T_stat <- numeric(iter)
n <- dim(x_pooled)[1]
n1 <- dim(x)[1]
for(perm in 1:iter){
# Permutation:
permutation <- sample(1:n)
x_pooled_perm <- x_pooled[permutation,]
x_perm <- x_pooled_perm[1:n1,]
y_perm <- x_pooled_perm[(n1+1):n,]
matrix_x_perm <- correlation_matrix(x_perm)
matrix_y_perm <- correlation_matrix(y_perm)
T_stat[perm] <- sqrt(sum((matrix_x_perm - matrix_y_perm)^2))
# T_stat[perm] <- 1 - sum(diag(matrix_x_perm*matrix_y_perm))/(norm(matrix_x_perm,"F")*norm(matrix_y_perm,"F"))
}
#pvalue
p_val <- sum(na.omit(T_stat)>=T0)/(iter-sum(is.na(T_stat)))
p_val
